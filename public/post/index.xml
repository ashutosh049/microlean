<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Microlean</title>
    <link>https://ashutosh049.github.io/post/</link>
    <description>Recent content in Posts on Microlean</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 31 Aug 2020 13:09:42 -0600</lastBuildDate><atom:link href="https://ashutosh049.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Binary Tree: Lowest Common Ancestor (LCA)</title>
      <link>https://ashutosh049.github.io/post/binary-tree-lowest-common-ancestor-lca/binary-tree-lowest-common-ancestor-lca/</link>
      <pubDate>Mon, 31 Aug 2020 13:09:42 -0600</pubDate>
      
      <guid>https://ashutosh049.github.io/post/binary-tree-lowest-common-ancestor-lca/binary-tree-lowest-common-ancestor-lca/</guid>
      <description>Module: Binary Tree
You can refer to the Leetcode problem 236. Lowest Common Ancestor of a Binary Tree
 Problem Statement Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.
 According to the definition of LCA on Wikipedia: â€œThe lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).</description>
    </item>
    
    <item>
      <title>Binary Tree: Maximum Depth/Height Of Deepest Node using recursive and iterative way</title>
      <link>https://ashutosh049.github.io/post/binary-tree-maximum-depthheight-of-deepest-node-using-recursive-and-iterative-way-hpp/binary-tree-maximum-depthheight-of-deepest-node-using-recursive-and-iterative-way-hpp/</link>
      <pubDate>Mon, 31 Aug 2020 13:09:42 -0600</pubDate>
      
      <guid>https://ashutosh049.github.io/post/binary-tree-maximum-depthheight-of-deepest-node-using-recursive-and-iterative-way-hpp/binary-tree-maximum-depthheight-of-deepest-node-using-recursive-and-iterative-way-hpp/</guid>
      <description>Module: Binary Tree
You can refer to the Leetcode problem 104. Maximum Depth of Binary Tree
Problem Statement Given the root of a binary tree, return its maximum depth.
 A binary tree&amp;rsquo;s maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.
 Example 1:
 (3)/ \(9) (20)/ \(15) (7)Input: root = [3,9,20,null,null,15,7] Output: 3</description>
    </item>
    
    <item>
      <title>Demystifying Spring Task Executor</title>
      <link>https://ashutosh049.github.io/post/demystifying_spring_task_executor/</link>
      <pubDate>Mon, 31 Aug 2020 13:09:42 -0600</pubDate>
      
      <guid>https://ashutosh049.github.io/post/demystifying_spring_task_executor/</guid>
      <description>corePoolSize vs. maxPoolSize vs. queueCapacity
@Bean @Primary public TaskExecutor taskExecutor() { ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor(); executor.setCorePoolSize(3); executor.setMaxPoolSize(6); executor.setQueueCapacity(4); executor.setWaitForTasksToCompleteOnShutdown(false); executor.setThreadNamePrefix(&amp;#34;my-async&amp;#34;); executor.initialize(); return executor; } Core pool size In a nut shell, Core pool size is the happy path. When a new task is submitted and fewer than Core Pool Size threads are running, a new thread is created to handle the request, even if other threads are idle. If there are greater than Core Pool Size but fewer than Max Pool Size threads running, a new thread is created only if no threads are idle.</description>
    </item>
    
  </channel>
</rss>
